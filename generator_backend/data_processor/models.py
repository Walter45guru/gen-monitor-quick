from django.db import models

class NewGeneratorData(models.Model):
    control_switch_position = models.CharField(max_length=20, null=True, blank=True)
    genset_state = models.CharField(max_length=30, null=True, blank=True)
    current_fault = models.IntegerField(null=True, blank=True)
    current_fault_severity = models.CharField(max_length=20, null=True, blank=True)
    genset_l1_n_rms_voltage = models.FloatField(null=True, blank=True)
    genset_l2_n_rms_voltage = models.FloatField(null=True, blank=True)
    genset_l3_n_rms_voltage = models.FloatField(null=True, blank=True)
    genset_l1_l2_rms_voltage = models.FloatField(null=True, blank=True)
    genset_l2_l3_rms_voltage = models.FloatField(null=True, blank=True)
    genset_l3_l1_rms_voltage = models.FloatField(null=True, blank=True)
    genset_l1_rms_current = models.FloatField(null=True, blank=True)
    genset_l2_rms_current = models.FloatField(null=True, blank=True)
    genset_l3_rms_current = models.FloatField(null=True, blank=True)
    genset_l1_kw = models.FloatField(null=True, blank=True)
    genset_l2_kw = models.FloatField(null=True, blank=True)
    genset_l3_kw = models.FloatField(null=True, blank=True)
    genset_total_kw = models.FloatField(null=True, blank=True)
    genset_l1_kvar = models.FloatField(null=True, blank=True)
    genset_l2_kvar = models.FloatField(null=True, blank=True)
    genset_l3_kvar = models.FloatField(null=True, blank=True)
    genset_total_kvar = models.FloatField(null=True, blank=True)
    genset_l1_kva = models.FloatField(null=True, blank=True)
    genset_l2_kva = models.FloatField(null=True, blank=True)
    genset_l3_kva = models.FloatField(null=True, blank=True)
    genset_total_kva = models.FloatField(null=True, blank=True)
    genset_frequency = models.FloatField(null=True, blank=True)
    battery_voltage = models.FloatField(null=True, blank=True)
    oil_pressure = models.FloatField(null=True, blank=True)
    coolant_temperature = models.FloatField(null=True, blank=True)
    average_engine_speed = models.FloatField(null=True, blank=True)
    start_attempts = models.IntegerField(null=True, blank=True)
    utility_l1_n_rms_voltage = models.FloatField(null=True, blank=True)
    utility_l2_n_rms_voltage = models.FloatField(null=True, blank=True)
    utility_l3_n_rms_voltage = models.FloatField(null=True, blank=True)
    utility_l1_l2_rms_voltage = models.FloatField(null=True, blank=True)
    utility_l2_l3_rms_voltage = models.FloatField(null=True, blank=True)
    utility_l3_l1_rms_voltage = models.FloatField(null=True, blank=True)
    charging_alternator_voltage = models.FloatField(null=True, blank=True)
    modbus_remote_start = models.CharField(max_length=10, null=True, blank=True)
    modbus_fault_reset = models.CharField(max_length=10, null=True, blank=True)
    network_shutdown_modbus_command = models.CharField(max_length=20, null=True, blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"NewGeneratorData at {self.timestamp}" 